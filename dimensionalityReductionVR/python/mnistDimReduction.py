#%% MNIST DIMENSIONALITY REDUCTION DATA FOR USE IN GEAR_VR

"""
# THIS CODE IS MODIFED FROM ORIGINAL CODE BY:

=============================================================================
Manifold learning on handwritten digits: Locally Linear Embedding, Isomap...
=============================================================================

An illustration of various embeddings on the digits dataset.

The RandomTreesEmbedding, from the :mod:`sklearn.ensemble` module, is not
technically a manifold embedding method, as it learn a high-dimensional
representation on which we apply a dimensionality reduction method.
However, it is often useful to cast a dataset into a representation in
which the classes are linearly-separable.

t-SNE will be initialized with the embedding that is generated by PCA in
this example, which is not the default setting. It ensures global stability
of the embedding, i.e., the embedding does not depend on random
initialization.


# Authors: Fabian Pedregosa <fabian.pedregosa@inria.fr>
#          Olivier Grisel <olivier.grisel@ensta.org>
#          Mathieu Blondel <mathieu@mblondel.org>
#          Gael Varoquaux
# License: BSD 3 clause (C) INRIA 2011
"""

import numpy as np
from sklearn import manifold, decomposition
import cPickle as pickle

f = open("/Users/mettinger/Data/mnist.pkl",'r')
train_set, valid_set, test_set = pickle.load(f)
f.close()

n_neighbors = 30
numSamples = 10000

#%%

X_total = train_set[0]
y_total = train_set[1].reshape(len(train_set[1]),1)
numData = len(y_total)
sampleIndices = np.random.choice(range(numData),size = numSamples, replace = False)

X = X_total[sampleIndices,:]
y = y_total[sampleIndices]

#%%
print("Computing PCA projection")
X_pca = decomposition.TruncatedSVD(n_components=3).fit_transform(X)

print("Computing t-SNE embedding")
tsne = manifold.TSNE(n_components=3, init='pca', random_state=0)
X_tsne = tsne.fit_transform(X)

print("Computing Isomap embedding")
X_iso = manifold.Isomap(n_neighbors, n_components=3).fit_transform(X)

print("Computing MDS embedding")
clf = manifold.MDS(n_components=3, n_init=1, max_iter=100)
X_mds = clf.fit_transform(X)

allEmbeddings = np.hstack((y, X_pca, X_tsne, X_iso, X_mds))

#%%

fname = "/Users/mettinger/Data/embeddings.txt"
np.savetxt(fname, allEmbeddings, fmt='%.3f', delimiter=',', newline='\n')

